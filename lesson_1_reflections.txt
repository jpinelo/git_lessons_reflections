#1
Automatically highlight differences between files is extremely useful to spot changes between newer and older versions of the same file.
Differences are particularly useful to spot unintentional changes.
#2
Having access to the entire history of a file makes it possible to trace back the sequence of changes.
Timestamps on the record of changes allows for checking the evolution of several files.
#3
Manual Commits make sense because they can tag logically independent changes.
#4
Muiltipme-file commits are hugely helpful becasue they create a version for all the files in a repository, simultaneously.
5#
with command 'git log' I can, from inside the directory where the project files are, see all the commits.
After finding the one I care for, I should copy the  commit id of the one after, use command 'git diff' and past the commit id I was loking for 
ex:
git diff b0678b161fcf74467ed3a63110557e3d6229cfa6 b0558b161fcf74467ed3a63110557e3d6229cfa5
6#
version control makes it easy to go back to a commit where things were working, and work forward to find the bug that causes an undesired effect.
It is then a matter of checking out the latest commit and just fix the cause for error.
I guess that another option would be to restart from that point by creating a new branch?
#7
Will use git for most code development, and eventually other files
